[
  {
    "question": "Що таке JavaScript?",
    "answer": "JavaScript — це динамічна, прототипно-орієнтована мова програмування, яка використовується для створення інтерактивного контенту на вебсторінках. Вона підтримує подієве програмування, асинхронність і працює в браузері, а також на сервері через Node.js.",
    "codeExample": "console.log('Hello, JavaScript!');",
    "category": "js",
    "isFavorite": false,
    "id": "1"
  },
  {
    "question": "Які ключові слова використовуються для оголошення змінних у JavaScript?",
    "answer": "У JavaScript змінні можна оголошувати за допомогою трьох ключових слів: var, let, const. var — старий спосіб, let — для змінних, які можуть змінюватися, const — для констант.",
    "codeExample": "var x = 10;\nlet y = 20;\nconst z = 30;",
    "category": "js",
    "isFavorite": false,
    "id": "2"
  },
  {
    "question": "Перерахуйте типи даних у JavaScript.",
    "answer": "Примітивні: string, number, boolean, null, undefined, bigint, symbol. Складні: object (включаючи масиви, функції, дати тощо).",
    "codeExample": "let str = 'text';\nlet num = 42;\nlet arr = [1, 2, 3];",
    "category": "js",
    "isFavorite": false,
    "id": "3"
  },
  {
    "question": "У чому різниця між функціональним і подієвим програмуванням у JavaScript?",
    "answer": "Функціональне програмування базується на чистих функціях, іммутабельності та композиції. Подієве програмування — це реакція на події (click, hover), використання обробників подій.",
    "codeExample": "// Функціональний підхід\nconst doubled = [1,2,3].map(x => x*2);\n// Подієвий підхід\ndocument.addEventListener('click', () => alert('Clicked!'));",
    "category": "js",
    "isFavorite": false,
    "id": "4"
  },
  {
    "question": "У якому році відбувся перший реліз JavaScript, і в якому браузері він був вперше використаний?",
    "answer": "Перший реліз JavaScript відбувся в 1995 році. Він був вперше реалізований у браузері Netscape Navigator.",
    "codeExample": "// Історичний факт, коду не потрібно",
    "category": "js",
    "isFavorite": false,
    "id": "5"
  },
  {
    "question": "Чим відрізняється масив та обʼєкт? У яких випадках що використовуєте?",
    "answer": "Масив — впорядкована колекція елементів, доступ за індексом. Обʼєкт — набір пар ключ-значення. Масив — для списків, обʼєкт — для структурованих даних.",
    "codeExample": "const arr = [1,2,3];\nconst obj = {name: 'Іван', age: 25};",
    "category": "js",
    "isFavorite": false,
    "id": "6"
  },
  {
    "question": "Events в JavaScript. Розкажіть про event propagation, bubbling, delegation, preventing тощо.",
    "answer": "Event propagation — це поширення події через DOM: capturing (зверху вниз), bubbling (знизу вгору). Delegation — обробка подій на батьківському елементі. preventDefault() — скасування стандартної поведінки.",
    "codeExample": "element.addEventListener('click', e => e.stopPropagation());",
    "category": "js",
    "isFavorite": false,
    "id": "7"
  },
  {
    "question": "Чи можливо перевизначити const?",
    "answer": "Ні, значення, оголошене через const, не можна змінити. Але якщо const — це обʼєкт або масив, їх вміст можна змінювати.",
    "codeExample": "const a = 5;\n// a = 10; // Error\nconst arr = [1,2];\narr.push(3); // OK",
    "category": "js",
    "isFavorite": false,
    "id": "8"
  },
  {
    "question": "Чи відомі вам принципи DRY, KISS, YAGNI, SOLID?",
    "answer": "DRY — не дублюй код. KISS — роби просто. YAGNI — не роби зайвого. SOLID — набір принципів для ООП: SRP, OCP, LSP, ISP, DIP.",
    "codeExample": "// DRY: функція для повторюваної логіки\nfunction sum(a, b) { return a + b; }",
    "category": "js",
    "isFavorite": false,
    "id": "9"
  },
  {
    "question": "У чому відмінності LocalStorage від SessionStorage?",
    "answer": "LocalStorage зберігає дані безстроково, SessionStorage — лише на час сесії (до закриття вкладки). Обидва мають обмеження по обсягу.",
    "codeExample": "localStorage.setItem('key', 'value');\nsessionStorage.setItem('key', 'value');",
    "category": "js",
    "isFavorite": false,
    "id": "10"
  },
  {
    "question": "Що таке замикання (closure) в JavaScript і як воно працює?",
    "answer": "Замикання — це функція, яка \"запам'ятовує\" оточення, в якому була створена, і має доступ до змінних зовнішньої функції навіть після її завершення.",
    "codeExample": "function outer() {\n  let counter = 0;\n  return function() { counter++; return counter; };\n}\nconst inc = outer();\ninc(); // 1\ninc(); // 2",
    "category": "js",
    "isFavorite": false,
    "id": "11"
  },
  {
    "question": "Що таке Кукі (cookies) і як вони працюють в JavaScript?",
    "answer": "Кукі — це невеликі фрагменти даних, які сайт зберігає в браузері. Встановлюються через document.cookie, використовуються для ідентифікації, налаштувань, аналітики.",
    "codeExample": "document.cookie = 'user=Іван; expires=Thu, 31 Dec 2025 23:59:59 UTC; path=/';",
    "category": "js",
    "isFavorite": false,
    "id": "12"
  },
  {
    "question": "Що таке область видимості змінної?",
    "answer": "Область видимості — це частина коду, де змінна доступна. Є глобальна, функціональна (var), блочна (let, const) області.",
    "codeExample": "function test() {\n  let a = 1;\n  if (true) {\n    let b = 2;\n  }\n  // b тут недоступна\n}",
    "category": "js",
    "isFavorite": false,
    "id": "13"
  },
  {
    "question": "Що таке анонімна функція (anonymous function)?",
    "answer": "Анонімна функція — це функція без імені. Часто використовується як колбек або для одноразового використання.",
    "codeExample": "const arr = [1,2,3];\narr.map(function(x) { return x * 2; });",
    "category": "js",
    "isFavorite": false,
    "id": "14"
  },
  {
    "question": "Що таке стрілкова функція і як вона відрізняється від звичайної функції?",
    "answer": "Стрілкова функція — короткий синтаксис для функцій. Не має власного this, arguments, не може бути конструктором.",
    "codeExample": "const add = (a, b) => a + b;",
    "category": "js",
    "isFavorite": false,
    "id": "15"
  },
  {
    "question": "Які методи перебору масивів ви знаєте?",
    "answer": "forEach, map, filter, reduce, some, every, find, findIndex, flatMap, keys, values, entries, for...of, sort, reverse, slice, splice.",
    "codeExample": "const arr = [1,2,3];\narr.map(x => x * 2);",
    "category": "js",
    "isFavorite": false,
    "id": "16"
  },
  {
    "question": "Що таке JSON і як працювати з ним у JavaScript?",
    "answer": "JSON — це текстовий формат обміну даними. Для роботи: JSON.stringify(obj) — у рядок, JSON.parse(str) — у обʼєкт.",
    "codeExample": "const str = JSON.stringify({a:1});\nconst obj = JSON.parse(str);",
    "category": "js",
    "isFavorite": false,
    "id": "17"
  },
  {
    "question": "Як виконується асинхронний код у JavaScript?",
    "answer": "Асинхронний код виконується через події, колбеки, проміси, async/await. Використовується event loop.",
    "codeExample": "setTimeout(() => console.log('Async!'), 1000);",
    "category": "js",
    "isFavorite": false,
    "id": "18"
  },
  {
    "question": "Яка різниця між нестрогим порівнянням == та строгим порівнянням === у JavaScript?",
    "answer": "== порівнює з приведенням типів, === — без приведення. Рекомендується використовувати === для уникнення неочікуваних результатів.",
    "codeExample": "\"5\" == 5; // true\n\"5\" === 5; // false",
    "category": "js",
    "isFavorite": false,
    "id": "19"
  },
  {
    "question": "Що таке прототип у JavaScript?",
    "answer": "Прототип — це механізм, за допомогою якого об'єкти можуть успадковувати властивості та методи від інших об'єктів.",
    "codeExample": "function Person(name) {\n  this.name = name;\n}\nPerson.prototype.greet = function() { return `Привіт, я ${this.name}`; };\nconst user = new Person('Іван');\nuser.greet(); // Привіт, я Іван",
    "category": "js",
    "isFavorite": false,
    "id": "20"
  },
  {
    "question": "У чому різниця між null та undefined?",
    "answer": "null — це об'єкт, що означає відсутність значення. undefined — змінна оголошена, але не має значення. null == undefined — true, але null === undefined — false.",
    "codeExample": "let a = null;\nlet b;\nconsole.log(a == b); // true\nconsole.log(a === b); // false",
    "category": "js",
    "isFavorite": false,
    "id": "21"
  },
  {
    "question": "Що таке контекст? Як можна змінювати контекст виконання функції?",
    "answer": "Контекст (this) — це об'єкт, до якого прив'язаний виклик функції. Змінюється через call, apply, bind.",
    "codeExample": "function greet() { console.log(this.name); }\nconst obj = { name: 'Іван' };\ngreet.call(obj); // Іван",
    "category": "js",
    "isFavorite": false,
    "id": "22"
  },
  {
    "question": "Що таке Promise? У яких випадках ви ним користуєтеся?",
    "answer": "Promise — це об'єкт для роботи з асинхронними операціями. Має стани: pending, fulfilled, rejected. Використовується для обробки асинхронних дій.",
    "codeExample": "const p = new Promise((res, rej) => res(42));\np.then(val => console.log(val));",
    "category": "js",
    "isFavorite": false,
    "id": "23"
  },
  {
    "question": "Які особливості об’єктноорієнтованого програмування у JavaScript?",
    "answer": "JavaScript підтримує ООП через прототипи, функції-конструктори, класи (ES6), інкапсуляцію, поліморфізм, наслідування.",
    "codeExample": "class Animal {\n  speak() { console.log('sound'); }\n}\nclass Dog extends Animal {\n  speak() { console.log('Гав!'); }\n}\nconst d = new Dog();\nd.speak(); // Гав!",
    "category": "js",
    "isFavorite": false,
    "id": "24"
  },
  {
    "question": "Як з JavaScript-коду звернутись до HTML-елемента та змінити його текст?",
    "answer": "Можна використати getElementById, querySelector та властивість textContent або innerText.",
    "codeExample": "const el = document.getElementById('demo');\nel.textContent = 'Новий текст';",
    "category": "js",
    "isFavorite": false,
    "id": "25"
  },
  {
    "question": "Що таке деструктуризація?",
    "answer": "Деструктуризація — це синтаксис для розпаковки значень з масивів або властивостей з об'єктів у змінні.",
    "codeExample": "const [a, b] = [1, 2];\nconst {name, age} = {name: 'Іван', age: 25};",
    "category": "js",
    "isFavorite": false,
    "id": "26"
  },
  {
    "question": "Що буде, якщо звернутись до елемента масива, якого немає за індексом?",
    "answer": "JavaScript поверне undefined.",
    "codeExample": "const arr = [1,2,3];\nconsole.log(arr[10]); // undefined",
    "category": "js",
    "isFavorite": false,
    "id": "27"
  },
  {
    "question": "У чому різниця між for..of та for...in?",
    "answer": "for...of ітерує значення ітерабельних об'єктів (масиви, строки), for...in — ключі об'єкта або індекси масиву.",
    "codeExample": "for (const val of [1,2,3]) { console.log(val); }\nfor (const key in {a:1,b:2}) { console.log(key); }",
    "category": "js",
    "isFavorite": false,
    "id": "28"
  },
  {
    "question": "Навіщо використовується оператор && логічне І?",
    "answer": "Оператор && повертає перше хибне або останнє істинне значення. Використовується для перевірки кількох умов, короткого замикання, умовного виконання.",
    "codeExample": "const a = true, b = false;\nconsole.log(a && b); // false",
    "category": "js",
    "isFavorite": false,
    "id": "29"
  },
  {
    "question": "Навіщо використовується оператор || логічне АБО ?",
    "answer": "Оператор || повертає перше істинне або останнє хибне значення. Використовується для дефолтних значень, альтернативних дій.",
    "codeExample": "const a = false, b = 'JS';\nconsole.log(a || b); // 'JS'",
    "category": "js",
    "isFavorite": false,
    "id": "30"
  },
  {
    "question": "Навіщо використовується оператор !!?",
    "answer": "!! приводить будь-яке значення до булевого типу. Зручно для перевірок істинності.",
    "codeExample": "console.log(!!0); // false\nconsole.log(!!'abc'); // true",
    "category": "js",
    "isFavorite": false,
    "id": "31"
  },
  {
    "question": "Навіщо використовується оператор ! логічне НЕ?",
    "answer": "! інвертує булеве значення. Зручно для перевірки хибності.",
    "codeExample": "console.log(!true); // false\nconsole.log(!''); // true",
    "category": "js",
    "isFavorite": false,
    "id": "32"
  },
  {
    "question": "Які значення в JavaScript є хибними?",
    "answer": "false, 0, -0, NaN, '', \"\", ``, null, undefined.",
    "codeExample": "console.log(Boolean(0)); // false\nconsole.log(Boolean('')); // false",
    "category": "js",
    "isFavorite": false,
    "id": "33"
  },
  {
    "question": "Які значення в JavaScript є правдивими?",
    "answer": "Всі, що не є хибними: непорожні рядки, числа (крім 0), об'єкти, масиви, функції, Symbol, BigInt ≠ 0.",
    "codeExample": "console.log(Boolean('abc')); // true\nconsole.log(Boolean([])); // true",
    "category": "js",
    "isFavorite": false,
    "id": "34"
  },
  {
    "question": "Як перевірити, чи є значення хибним?",
    "answer": "Використати !value, Boolean(value) або !!value.",
    "codeExample": "if (!value) { console.log('Falsy'); }",
    "category": "js",
    "isFavorite": false,
    "id": "35"
  },
  {
    "question": "Що таке DOM?",
    "answer": "DOM — це об'єктна модель документа, яка представляє HTML як дерево об'єктів. Дозволяє змінювати структуру, стиль і вміст сторінки через JavaScript.",
    "codeExample": "document.body.style.background = 'yellow';",
    "category": "js",
    "isFavorite": false,
    "id": "36"
  },
  {
    "question": "Що таке розповсюдження події (Event Propogation)?",
    "answer": "Event Propagation — це процес, коли подія поширюється через DOM: capturing (зверху вниз), target, bubbling (знизу вгору).",
    "codeExample": "element.addEventListener('click', e => e.stopPropagation());",
    "category": "js",
    "isFavorite": false,
    "id": "37"
  },
  {
    "question": "Чому результат порівняння двох схожих об'єктів є false?",
    "answer": "Об'єкти порівнюються за посиланням, а не за вмістом. Два однакових об'єкти — це різні екземпляри.",
    "codeExample": "const a = {x:1}, b = {x:1};\nconsole.log(a === b); // false",
    "category": "js",
    "isFavorite": false,
    "id": "38"
  },
  {
    "question": "Який найшвидший спосіб перетворення рядка на число?",
    "answer": "Використати унарний плюс: +str.",
    "codeExample": "const num = +'42'; // 42",
    "category": "js",
    "isFavorite": false,
    "id": "39"
  },
  {
    "question": "Як записати кілька виразів в один рядок?",
    "answer": "Можна розділити вирази крапкою з комою ;. Але це не завжди рекомендується для читабельності.",
    "codeExample": "let a = 1; let b = 2; let c = a + b;",
    "category": "js",
    "isFavorite": false,
    "id": "40"
  },
  {
    "question": "Що таке підняття (Hoisting)?",
    "answer": "Hoisting — це механізм, коли оголошення змінних і функцій \"піднімаються\" на початок області видимості. Для var — піднімається оголошення, але не значення. Для let/const — підняття є, але доступ до ініціалізації викликає помилку.",
    "codeExample": "console.log(a); // undefined\nvar a = 5;",
    "category": "js",
    "isFavorite": false,
    "id": "41"
  },
  {
    "question": "Що таке область видимості (Scope)?",
    "answer": "Scope — це контекст, у якому визначаються змінні. Є глобальна, функціональна, блочна, лексична області видимості.",
    "codeExample": "if (true) { let x = 1; }\n// x тут недоступна",
    "category": "js",
    "isFavorite": false,
    "id": "42"
  },
  {
    "question": "Навіщо використовується директива use strict?",
    "answer": "\"use strict\" вмикає строгий режим, який забороняє деякі небезпечні дії, допомагає уникати помилок і робить код безпечнішим.",
    "codeExample": "\"use strict\";\nx = 10; // ReferenceError",
    "category": "js",
    "isFavorite": false,
    "id": "43"
  },
  {
    "question": "Яке значення має this?",
    "answer": "this залежить від контексту виклику: глобально — window, у методі — об'єкт, у конструкторі — новий екземпляр, у стрілковій функції — this зовнішнього контексту.",
    "codeExample": "const obj = { foo() { return this; } };\nobj.foo(); // obj",
    "category": "js",
    "isFavorite": false,
    "id": "44"
  },
  {
    "question": "Що таке прототип об'єкта?",
    "answer": "Прототип — це об'єкт, від якого інші об'єкти можуть наслідувати властивості та методи.",
    "codeExample": "function Animal(name) { this.name = name; }\nAnimal.prototype.speak = function() { return `${this.name} sound`; }",
    "category": "js",
    "isFavorite": false,
    "id": "45"
  },
  {
    "question": "Що таке IIFE?",
    "answer": "IIFE (Immediately Invoked Function Expression) — це функція, яка викликається одразу після оголошення для створення ізольованого контексту.",
    "codeExample": "(function() { console.log('IIFE!'); })();",
    "category": "js",
    "isFavorite": false,
    "id": "46"
  },
  {
    "question": "Навіщо використовується метод Function.prototype.apply?",
    "answer": "apply викликає функцію з вказаним this і масивом аргументів.",
    "codeExample": "function sum(a, b) { return a + b; }\nconsole.log(sum.apply(null, [2, 3])); // 5",
    "category": "js",
    "isFavorite": false,
    "id": "47"
  },
  {
    "question": "Навіщо використовується метод Function.prototype.call?",
    "answer": "call викликає функцію з вказаним this і списком аргументів.",
    "codeExample": "function sum(a, b) { return a + b; }\nconsole.log(sum.call(null, 2, 3)); // 5",
    "category": "js",
    "isFavorite": false,
    "id": "48"
  },
  {
    "question": "У чому різниця між методами call та apply?",
    "answer": "call приймає аргументи списком, apply — масивом. Обидва змінюють this.",
    "codeExample": "sum.call(obj, 1, 2);\nsum.apply(obj, [1, 2]);",
    "category": "js",
    "isFavorite": false,
    "id": "49"
  },
  {
    "question": "Навіщо використовується метод Function.prototype.bind?",
    "answer": "bind створює нову функцію з фіксованим this і, за потреби, аргументами.",
    "codeExample": "const obj = {x: 5};\nfunction show() { return this.x; }\nconst bound = show.bind(obj);\nbound(); // 5",
    "category": "js",
    "isFavorite": false,
    "id": "50"
  },
  {
    "question": "Що таке функціональне програмування?",
    "answer": "Функціональне програмування — це парадигма, де основою є чисті функції, немутованість, функції вищого порядку, композиція.",
    "codeExample": "const double = x => x * 2;\n[1,2,3].map(double);",
    "category": "js",
    "isFavorite": false,
    "id": "51"
  },
  {
    "question": "Які особливості JavaScript дозволяють говорити про нього як про функціональну мову програмування?",
    "answer": "Функції — першокласні об'єкти, підтримка замикань, функції-стрілки, методи масивів (map, filter, reduce), HOF.",
    "codeExample": "const add = (a, b) => a + b;\nconst apply = (fn, a, b) => fn(a, b);",
    "category": "js",
    "isFavorite": false,
    "id": "52"
  },
  {
    "question": "Що таке функції вищого ладу (Higher Order Functions)?",
    "answer": "HOF — це функції, які приймають інші функції як аргументи або повертають функції.",
    "codeExample": "const arr = [1,2,3];\narr.map(x => x * 2);",
    "category": "js",
    "isFavorite": false,
    "id": "53"
  },
  {
    "question": "Чому функції у JavaScript називають об'єктами першого класу (First-class Objects)?",
    "answer": "Функції можна зберігати у змінних, передавати як аргументи, повертати з інших функцій, створювати динамічно.",
    "codeExample": "const fn = () => 'hi';\nfunction call(f) { return f(); }",
    "category": "js",
    "isFavorite": false,
    "id": "54"
  },
  {
    "question": "Що таке об'єкт arguments?",
    "answer": "arguments — це масивоподібний об'єкт, який містить усі аргументи, передані у функцію (тільки для звичайних функцій, не для стрілкових).",
    "codeExample": "function sum() { return Array.from(arguments).reduce((a,b) => a+b, 0); }",
    "category": "js",
    "isFavorite": false,
    "id": "55"
  },
  {
    "question": "Як створити об'єкт, який не має прототипу?",
    "answer": "Використати Object.create(null).",
    "codeExample": "const obj = Object.create(null);",
    "category": "js",
    "isFavorite": false,
    "id": "56"
  },
  {
    "question": "Що таке ECMAScript?",
    "answer": "ECMAScript — це стандарт мови програмування, на основі якого реалізовано JavaScript.",
    "codeExample": "// ECMAScript визначає синтаксис, типи, об'єкти, оператори тощо.",
    "category": "js",
    "isFavorite": false,
    "id": "57"
  },
  {
    "question": "У чому різниця між ключовими словами var, let та const?",
    "answer": "var — функціональна область видимості, підняття, можна перевизначати. let/const — блочна область, не можна перевизначати, const — не можна змінювати значення.",
    "codeExample": "var a = 1;\nlet b = 2;\nconst c = 3;",
    "category": "js",
    "isFavorite": false,
    "id": "58"
  },
  {
    "question": "Що таке класи (Classes)?",
    "answer": "Класи — це синтаксичний цукор над прототипним наслідуванням, який спрощує створення об'єктів, організацію коду, наслідування, інкапсуляцію.",
    "codeExample": "class Person {\n  constructor(name) { this.name = name; }\n  greet() { return `Hi, I'm ${this.name}`; }\n}\nconst p = new Person('Alice');\np.greet();",
    "category": "js",
    "isFavorite": false,
    "id": "59"
  },
  {
    "question": "Що таке шаблонні літерали (Template Literals)?",
    "answer": "Template literals — це синтаксис для створення рядків із підстановкою змінних, багаторядкових рядків, виразів. Використовують зворотні лапки ``.",
    "codeExample": "const name = 'Іван';\nconsole.log(`Привіт, ${name}!`);",
    "category": "js",
    "isFavorite": false,
    "id": "60"
  },
  {
    "question": "Що таке модулі (Modules)?",
    "answer": "Модулі — це спосіб організації коду, який дозволяє розбивати програму на ізольовані частини з чіткими залежностями. Використовують import/export.",
    "codeExample": "// math.js\nexport const add = (a, b) => a + b;\n// main.js\nimport { add } from './math.js';",
    "category": "js",
    "isFavorite": false,
    "id": "61"
  },
  {
    "question": "Навіщо потрібен оператор опціональної послідовності?",
    "answer": "Оператор ?. дозволяє безпечно звертатися до властивостей об'єкта, які можуть бути undefined або null, не викликаючи помилку.",
    "codeExample": "const user = {};\nconsole.log(user.profile?.name); // undefined",
    "category": "js",
    "isFavorite": false,
    "id": "62"
  }
]